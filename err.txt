/Users/work/.cargo/bin/cargo +stable test --color=always -p juniper_codegen_tests --all-features --no-fail-fast -- --format=json -Z unstable-options --show-output
Testing started at 15:02 ...
    Finished test [unoptimized + debuginfo] target(s) in 0.20s
     Running unittests (/Users/work/Work/juniper/target/debug/deps/juniper_codegen_tests-0ab20148dc3374c3)
    Checking juniper_codegen_tests-tests v0.0.0 (/Users/work/Work/juniper/target/tests/juniper_codegen_tests)
    Finished dev [unoptimized + debuginfo] target(s) in 0.28s


test fail/interface/field_double_underscored.rs ... ok
test fail/interface/implementers_duplicate_pretty.rs ... ok
test fail/interface/downcast_method_wrong_input_args.rs ... ok
test fail/interface/argument_wrong_default_array.rs ... ok
test fail/interface/wrong_item.rs ... ok
test fail/interface/name_double_underscored.rs ... ok
test fail/interface/argument_double_underscored.rs ... ok
test fail/interface/argument_non_input_type.rs ... ok
test fail/interface/downcast_method_conflicts_with_external_downcast_fn.rs ... ok
test fail/interface/no_fields.rs ... ok
test fail/interface/field_non_output_return_type.rs ... ok
test fail/interface/implementers_duplicate_ugly.rs ... ok
test fail/interface/downcast_method_wrong_return_type.rs ... ok
test fail/interface/fields_duplicate.rs ... ok
test fail/interface/implementer_non_object_type.rs ... ok
test fail/input-object/derive_no_fields.rs ... ok
test fail/input-object/derive_unique_name.rs ... ok
test fail/input-object/derive_no_underscore.rs ... ok
test fail/input-object/derive_incompatible_object.rs ... ok
test fail/enum/derive_no_fields.rs ... ok
test fail/subscription/field_double_underscored.rs ... ok
test fail/subscription/field_not_async.rs ... ok
test fail/subscription/argument_wrong_default_array.rs ... ok
test fail/subscription/wrong_item.rs ... ok
test fail/subscription/name_double_underscored.rs ... ok
test fail/subscription/argument_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

  --> fail/subscription/argument_double_underscored.rs:11:24
   |
11 |     async fn id(&self, __num: i32) -> Stream<'static, &'static str> {
   |
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

  --> fail/subscription/argument_double_underscored.rs:11:24
   |
11 |     async fn id(&self, __num: i32) -> Stream<'static, &'static str> {
   |                        ^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/subscription/argument_non_input_type.rs ... ok
test fail/subscription/no_fields.rs ... ok
test fail/subscription/field_non_output_return_type.rs ... ok
test fail/subscription/fields_duplicate.rs ... ok
test fail/object/derive_field_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.
 --> $DIR/derive_field_double_underscored.rs:5:5
  |
5 |     __test: String,
  |     ^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Schema
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/object/derive_field_double_underscored.rs:5:5
  |
5 |     __test: String,
  |     ^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/object/derive_no_fields.rs ... ok
test fail/object/derive_wrong_item.rs ... ok
test fail/object/attr_fields_duplicate.rs ... ok
test fail/object/argument_wrong_default_array.rs ... ok
test fail/object/argument_double_underscored.rs ... ok
test fail/object/argument_non_input_type.rs ... ok
test fail/object/attr_no_fields.rs ... { "type": "test", "event": "timeout", "name": "test_failing_compiliation" }
ok
test fail/object/attr_name_double_underscored.rs ... ok
test fail/object/derive_name_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/object/derive_field_double_underscored.rs:5:5
  |
5 |     __test: String,
  |     ^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/object/derive_name_double_underscored.rs:4:8
  |
4 | struct __Obj {
  |        ^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/object/derive_fields_duplicate.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL object must have a different name for each field
 --> $DIR/derive_fields_duplicate.rs:4:1
  |
4 | / struct ObjA {
5 | |     id: String,
6 | |     #[graphql(name = "id")]
7 | |     id2: String,
8 | | }
  | |_^
  |
  = note: https://spec.graphql.org/June2018/#sec-Objects
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL object must have a different name for each field

  = note: https://spec.graphql.org/June2018/#sec-Objects

 --> fail/object/derive_fields_duplicate.rs:4:1
  |
4 | struct ObjA {
  | ^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/object/attr_wrong_item.rs ... ok
test fail/object/attr_field_non_output_return_type.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `ObjB: IsOutputType<__S>` is not satisfied
  --> $DIR/attr_field_non_output_return_type.rs:10:1
   |
10 | #[graphql_object]
   | ^^^^^^^^^^^^^^^^^ the trait `IsOutputType<__S>` is not implemented for `ObjB`
   |
   = note: required by `juniper::marker::IsOutputType::mark`
   = note: this error originates in the attribute macro `graphql_object` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `ObjB: IsOutputType<__S>` is not satisfied
   --> fail/object/attr_field_non_output_return_type.rs:10:1
    |
10  | #[graphql_object]
    | ^^^^^^^^^^^^^^^^^ the trait `IsOutputType<__S>` is not implemented for `ObjB`
    |
note: required by `juniper::marker::IsOutputType::mark`
   --> $WORKSPACE/juniper/src/types/marker.rs
    |
    |     fn mark() {}
    |     ^^^^^^^^^
    = note: this error originates in the attribute macro `graphql_object` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/object/attr_field_double_underscored.rs ... ok
test fail/object/derive_field_non_output_return_type.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `ObjB: IsOutputType<__S>` is not satisfied
 --> $DIR/derive_field_non_output_return_type.rs:8:10
  |
8 | #[derive(GraphQLObject)]
  |          ^^^^^^^^^^^^^ the trait `IsOutputType<__S>` is not implemented for `ObjB`
  |
  = note: required by `juniper::marker::IsOutputType::mark`
  = note: this error originates in the derive macro `GraphQLObject` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `ObjB: IsOutputType<__S>` is not satisfied
   --> fail/object/derive_field_non_output_return_type.rs:8:10
    |
8   | #[derive(GraphQLObject)]
    |          ^^^^^^^^^^^^^ the trait `IsOutputType<__S>` is not implemented for `ObjB`
    |
note: required by `juniper::marker::IsOutputType::mark`
   --> $WORKSPACE/juniper/src/types/marker.rs
    |
    |     fn mark() {}
    |     ^^^^^^^^^
    = note: this error originates in the derive macro `GraphQLObject` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_wrong_variant_field.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union enum allows only unnamed variants with a single field, e.g. `Some(T)`
 --> $DIR/enum_wrong_variant_field.rs:5:5
  |
5 |     A { human: Human },
  |     ^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions

error: GraphQL union enum allows only unnamed variants with a single field, e.g. `Some(T)`
  --> $DIR/enum_wrong_variant_field.rs:10:6
   |
10 |     A(Human, u8),
   |      ^^^^^^^^^^^
   |
   = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union enum allows only unnamed variants with a single field, e.g. `Some(T)`

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/enum_wrong_variant_field.rs:5:5
  |
5 |     A { human: Human },
  |     ^

error: GraphQL union enum allows only unnamed variants with a single field, e.g. `Some(T)`

  = note: https://spec.graphql.org/June2018/#sec-Unions

  --> fail/union/enum_wrong_variant_field.rs:10:6
   |
10 |     A(Human, u8),
   |      ^^^^^^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/struct_non_object_variant.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
 --> $DIR/struct_non_object_variant.rs:9:10
  |
9 | #[derive(GraphQLUnion)]
  |          ^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
  |
  = note: required by `juniper::GraphQLObject::mark`
  = note: this error originates in the derive macro `GraphQLUnion` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
  --> fail/union/struct_non_object_variant.rs:9:10
   |
9  | #[derive(GraphQLUnion)]
   |          ^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
   |
note: required by `juniper::GraphQLObject::mark`
  --> $WORKSPACE/juniper/src/types/marker.rs
   |
   |     fn mark() {}
   |     ^^^^^^^^^
   = note: this error originates in the derive macro `GraphQLUnion` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/struct_same_type_pretty.rs ... ok
test fail/union/trait_fail_infer_context.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `CustomContext: FromContext<SubContext>` is not satisfied
 --> $DIR/trait_fail_infer_context.rs:3:1
  |
3 | #[graphql_union]
  | ^^^^^^^^^^^^^^^^ expected an implementor of trait `FromContext<SubContext>`
  |
  = note: required by `juniper::FromContext::from`
  = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
 --> $DIR/trait_fail_infer_context.rs:3:1
  |
3 | #[graphql_union]
  | ^^^^^^^^^^^^^^^^ expected struct `CustomContext`, found struct `SubContext`
  |
  = note: expected reference `&CustomContext`
             found reference `&SubContext`
  = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `CustomContext: FromContext<SubContext>` is not satisfied
   --> fail/union/trait_fail_infer_context.rs:3:1
    |
3   | #[graphql_union]
    | ^^^^^^^^^^^^^^^^ expected an implementor of trait `FromContext<SubContext>`
    |
note: required by `juniper::FromContext::from`
   --> $WORKSPACE/juniper/src/executor/mod.rs
    |
    |     fn from(value: &T) -> &Self;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
 --> fail/union/trait_fail_infer_context.rs:3:1
  |
3 | #[graphql_union]
  | ^^^^^^^^^^^^^^^^ expected struct `CustomContext`, found struct `SubContext`
  |
  = note: expected reference `&CustomContext`
             found reference `&SubContext`
  = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/derive_wrong_item.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union can only be derived for enums and structs
 --> $DIR/derive_wrong_item.rs:4:1
  |
4 | union Character { id: i32 }
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union can only be derived for enums and structs
 --> fail/union/derive_wrong_item.rs:4:1
  |
4 | union Character { id: i32 }
  | ^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_no_fields.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant
 --> $DIR/enum_no_fields.rs:4:1
  |
4 | enum Character {}
  | ^^^^^^^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/enum_no_fields.rs:4:1
  |
4 | enum Character {}
  | ^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_same_type_pretty.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union must have a different type for each union variant
 --> $DIR/enum_same_type_pretty.rs:4:1
  |
4 | / enum Character {
5 | |     A(u8),
6 | |     B(u8),
7 | | }
  | |_^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union must have a different type for each union variant

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/enum_same_type_pretty.rs:4:1
  |
4 | enum Character {
  | ^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_no_fields.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant
 --> $DIR/trait_no_fields.rs:4:1
  |
4 | trait Character {}
  | ^^^^^^^^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/trait_no_fields.rs:4:1
  |
4 | trait Character {}
  | ^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_same_type_ugly.rs ... ok
test fail/union/trait_same_type_ugly.rs ... ok
test fail/union/enum_non_object_variant.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
 --> $DIR/enum_non_object_variant.rs:9:10
  |
9 | #[derive(GraphQLUnion)]
  |          ^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
  |
  = note: required by `juniper::GraphQLObject::mark`
  = note: this error originates in the derive macro `GraphQLUnion` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
  --> fail/union/enum_non_object_variant.rs:9:10
   |
9  | #[derive(GraphQLUnion)]
   |          ^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
   |
note: required by `juniper::GraphQLObject::mark`
  --> $WORKSPACE/juniper/src/types/marker.rs
   |
   |     fn mark() {}
   |     ^^^^^^^^^
   = note: this error originates in the derive macro `GraphQLUnion` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_with_attr_on_method.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union cannot use #[graphql(with = ...)] attribute on a trait method
 --> $DIR/trait_with_attr_on_method.rs:5:15
  |
5 |     #[graphql(with = something)]
  |               ^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
  = note: instead use #[graphql(ignore)] on the method with #[graphql_union(on ... = ...)] on the trait itself
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union cannot use #[graphql(with = ...)] attribute on a trait method

  = note: https://spec.graphql.org/June2018/#sec-Unions
  = note: instead use #[graphql(ignore)] on the method with #[graphql_union(on ... = ...)] on the trait itself

 --> fail/union/trait_with_attr_on_method.rs:5:15
  |
5 |     #[graphql(with = something)]
  |               ^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_wrong_method_input_args.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects trait method to accept `&self` only and, optionally, `&Context`
 --> $DIR/trait_wrong_method_input_args.rs:5:10
  |
5 |     fn a(&self, ctx: &(), rand: u8) -> Option<&Human>;
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects trait method to accept `&self` only and, optionally, `&Context`

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/trait_wrong_method_input_args.rs:5:10
  |
5 |     fn a(&self, ctx: &(), rand: u8) -> Option<&Human>;
  |          ^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_name_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.
 --> $DIR/trait_name_double_underscored.rs:4:7
  |
4 | trait __Character {
  |       ^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Schema
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/union/trait_name_double_underscored.rs:4:7
  |
4 | trait __Character {
  |       ^^^^^^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_external_resolver_fn_conflicts_with_variant_external_resolver_fn.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union variant `Human` already has external resolver function `resolve_fn1` declared on the enum
 --> $DIR/enum_external_resolver_fn_conflicts_with_variant_external_resolver_fn.rs:6:15
  |
6 |     #[graphql(with = resolve_fn2)]
  |               ^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union variant `Human` already has external resolver function `resolve_fn1` declared on the enum

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/enum_external_resolver_fn_conflicts_with_variant_external_resolver_fn.rs:6:15
  |
6 |     #[graphql(with = resolve_fn2)]
  |               ^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_same_type_pretty.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union must have a different type for each union variant
 --> $DIR/trait_same_type_pretty.rs:4:1
  |
4 | / trait Character {
5 | |     fn a(&self) -> Option<&u8>;
6 | |     fn b(&self) -> Option<&u8>;
7 | | }
  | |_^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union must have a different type for each union variant

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/trait_same_type_pretty.rs:4:1
  |
4 | trait Character {
  | ^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/attr_wrong_item.rs ... ok
test fail/union/struct_no_fields.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant
 --> $DIR/struct_no_fields.rs:4:1
  |
4 | struct Character;
  | ^^^^^^^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects at least one union variant

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/struct_no_fields.rs:4:1
  |
4 | struct Character;
  | ^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/struct_name_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.
 --> $DIR/struct_name_double_underscored.rs:5:8
  |
5 | struct __Character;
  |        ^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Schema
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/union/struct_name_double_underscored.rs:5:8
  |
5 | struct __Character;
  |        ^^^^^^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_method_conflicts_with_external_resolver_fn.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union trait method `a` conflicts with the external resolver function `some_fn` declared on the trait to resolve the variant type `Human`
 --> $DIR/trait_method_conflicts_with_external_resolver_fn.rs:5:5
  |
5 |     fn a(&self) -> Option<&Human>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
  = note: use `#[graphql(ignore)]` attribute to ignore this trait method for union variants resolution
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union trait method `a` conflicts with the external resolver function `some_fn` declared on the trait to resolve the variant type `Human`

  = note: https://spec.graphql.org/June2018/#sec-Unions
  = note: use `#[graphql(ignore)]` attribute to ignore this trait method for union variants resolution

 --> fail/union/trait_method_conflicts_with_external_resolver_fn.rs:5:5
  |
5 |     fn a(&self) -> Option<&Human>;
  |     ^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/enum_name_double_underscored.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.
 --> $DIR/enum_name_double_underscored.rs:4:6
  |
4 | enum __Character {
  |      ^^^^^^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Schema
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: All types and directives defined within a schema must not have a name which begins with `__` (two underscores), as this is used exclusively by GraphQL’s introspection system.

  = note: https://spec.graphql.org/June2018/#sec-Schema

 --> fail/union/enum_name_double_underscored.rs:4:6
  |
4 | enum __Character {
  |      ^^^^^^^^^^^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/trait_non_object_variant.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
 --> $DIR/trait_non_object_variant.rs:9:1
  |
9 | #[graphql_union]
  | ^^^^^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
  |
  = note: required by `juniper::GraphQLObject::mark`
  = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error[E0277]: the trait bound `Test: GraphQLObject<__S>` is not satisfied
  --> fail/union/trait_non_object_variant.rs:9:1
   |
9  | #[graphql_union]
   | ^^^^^^^^^^^^^^^^ the trait `GraphQLObject<__S>` is not implemented for `Test`
   |
note: required by `juniper::GraphQLObject::mark`
  --> $WORKSPACE/juniper/src/types/marker.rs
   |
   |     fn mark() {}
   |     ^^^^^^^^^
   = note: this error originates in the attribute macro `graphql_union` (in Nightly builds, run with -Z macro-backtrace for more info)
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test fail/union/struct_same_type_ugly.rs ... ok
test fail/union/trait_wrong_method_return_type.rs ... mismatch

EXPECTED:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects trait method return type to be `Option<&VariantType>` only
 --> $DIR/trait_wrong_method_return_type.rs:5:20
  |
5 |     fn a(&self) -> &Human;
  |                    ^^^^^^
  |
  = note: https://spec.graphql.org/June2018/#sec-Unions
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

ACTUAL OUTPUT:
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
error: GraphQL union expects trait method return type to be `Option<&VariantType>` only

  = note: https://spec.graphql.org/June2018/#sec-Unions

 --> fail/union/trait_wrong_method_return_type.rs:5:20
  |
5 |     fn a(&self) -> &Human;
  |                    ^
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
note: If the actual output is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite




25 of 69 tests failed
thread 'test_failing_compiliation' panicked at '25 of 69 tests failed', /Users/work/.cargo/registry/src/github.com-1ecc6299db9ec823/trybuild-1.0.52/src/run.rs:74:13
stack backtrace:
   0: rust_begin_unwind
             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/panicking.rs:517:5
   1: std::panicking::begin_panic_fmt
             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/std/src/panicking.rs:460:5
   2: trybuild::run::<impl trybuild::Runner>::run
             at /Users/work/.cargo/registry/src/github.com-1ecc6299db9ec823/trybuild-1.0.52/src/run.rs:74:13
   3: <trybuild::TestCases as core::ops::drop::Drop>::drop
             at /Users/work/.cargo/registry/src/github.com-1ecc6299db9ec823/trybuild-1.0.52/src/lib.rs:306:13
   4: core::ptr::drop_in_place<trybuild::TestCases>
             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/ptr/mod.rs:188:1
   5: juniper_codegen_tests::test_failing_compiliation
             at ./src/lib.rs:38:1
   6: juniper_codegen_tests::test_failing_compiliation::{{closure}}
             at ./src/lib.rs:28:1
   7: core::ops::function::FnOnce::call_once
             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/ops/function.rs:227:5
   8: core::ops::function::FnOnce::call_once
             at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/ops/function.rs:227:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

   Doc-tests juniper_codegen_tests
error: test failed, to rerun pass '-p juniper_codegen_tests --lib'

Process finished with exit code 101
