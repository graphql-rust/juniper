error[E0277]: the trait bound `ObjectA: IsInputType<__S>` is not satisfied
 --> fail/input_object/enum/derive_incompatible_field_type.rs:8:10
  |
8 | #[derive(GraphQLInputObject)]
  |          ^^^^^^^^^^^^^^^^^^ the trait `IsInputType<__S>` is not implemented for `ObjectA`
  |
  = help: the following other types implement trait `IsInputType<S>`:
            `&T` implements `IsInputType<S>`
            `Arc<T>` implements `IsInputType<S>`
            `ArcStr` implements `IsInputType<__S>`
            `Box<T>` implements `IsInputType<S>`
            `ID` implements `IsInputType<__S>`
            `Object` implements `IsInputType<__S>`
            `TypeKind` implements `IsInputType<__S>`
            `Vec<T>` implements `IsInputType<S>`
          and $N others
  = note: required for `std::option::Option<ObjectA>` to implement `IsInputType<__S>`
  = note: this error originates in the derive macro `GraphQLInputObject` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ObjectA: FromInputValue<__S>` is not satisfied
 --> fail/input_object/enum/derive_incompatible_field_type.rs:8:10
  |
8 | #[derive(GraphQLInputObject)]
  |          ^^^^^^^^^^^^^^^^^^ the trait `FromInputValue<__S>` is not implemented for `ObjectA`
  |
  = help: the following other types implement trait `FromInputValue<S>`:
            `Arc<T>` implements `FromInputValue<S>`
            `ArcStr` implements `FromInputValue<__S>`
            `Box<T>` implements `FromInputValue<S>`
            `ID` implements `FromInputValue<__S>`
            `Object` implements `FromInputValue<__S>`
            `TypeKind` implements `FromInputValue<__S>`
            `Vec<T>` implements `FromInputValue<S>`
            `[T; N]` implements `FromInputValue<S>`
          and $N others
  = note: required for `std::option::Option<ObjectA>` to implement `FromInputValue<__S>`
note: required by a bound in `Registry::<S>::arg`
 --> $WORKSPACE/juniper/src/executor/mod.rs
  |
  |     pub fn arg<T>(&mut self, name: impl Into<ArcStr>, info: &T::TypeInfo) -> Argument<S>
  |            --- required by a bound in this associated function
  |     where
  |         T: GraphQLType<S> + FromInputValue<S>,
  |                             ^^^^^^^^^^^^^^^^^ required by this bound in `Registry::<S>::arg`
  = note: this error originates in the derive macro `GraphQLInputObject` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ObjectA: FromInputValue<__S>` is not satisfied
 --> fail/input_object/enum/derive_incompatible_field_type.rs:8:10
  |
8 | #[derive(GraphQLInputObject)]
  |          ^^^^^^^^^^^^^^^^^^ the trait `FromInputValue<__S>` is not implemented for `ObjectA`
  |
  = help: the following other types implement trait `FromInputValue<S>`:
            `Arc<T>` implements `FromInputValue<S>`
            `ArcStr` implements `FromInputValue<__S>`
            `Box<T>` implements `FromInputValue<S>`
            `ID` implements `FromInputValue<__S>`
            `Object` implements `FromInputValue<__S>`
            `TypeKind` implements `FromInputValue<__S>`
            `Vec<T>` implements `FromInputValue<S>`
            `[T; N]` implements `FromInputValue<S>`
          and $N others
  = note: this error originates in the derive macro `GraphQLInputObject` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ObjectA: ToInputValue<_>` is not satisfied
 --> fail/input_object/enum/derive_incompatible_field_type.rs:8:10
  |
8 | #[derive(GraphQLInputObject)]
  |          ^^^^^^^^^^^^^^^^^^ the trait `ToInputValue<_>` is not implemented for `ObjectA`
  |
  = help: the following other types implement trait `ToInputValue<S>`:
            `&T` implements `ToInputValue<S>`
            `Arc<T>` implements `ToInputValue<S>`
            `ArcStr` implements `ToInputValue<__S>`
            `Box<T>` implements `ToInputValue<S>`
            `ID` implements `ToInputValue<__S>`
            `Object` implements `ToInputValue<__S>`
            `TypeKind` implements `ToInputValue<__S>`
            `Value<S>` implements `ToInputValue<S>`
          and $N others
  = note: required for `&ObjectA` to implement `ToInputValue<_>`
  = note: 1 redundant requirement hidden
  = note: required for `std::option::Option<&ObjectA>` to implement `ToInputValue<_>`
  = note: this error originates in the derive macro `GraphQLInputObject` (in Nightly builds, run with -Z macro-backtrace for more info)
