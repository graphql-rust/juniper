error[E0080]: evaluation of constant value failed
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^ the evaluated program panicked at 'Failed to implement interface `Character` on `ObjA`: Field `id` isn't implemented on `ObjA`.', $DIR/fail/interface/trait/missing_field.rs:11:8
   |
   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_field_args` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of constant value failed
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^ the evaluated program panicked at 'Failed to implement interface `Character` on `ObjA`: Field `id` isn't implemented on `ObjA`.', $DIR/fail/interface/trait/missing_field.rs:11:8
   |
   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::assert_subtype` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::format_type` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
  --> fail/interface/trait/missing_field.rs:11:8
   |
11 |     fn id(&self) -> &str;
   |        ^^
   |
   = note: this note originates in the macro `$crate::const_concat` which comes from the expansion of the macro `::juniper::assert_field` (in Nightly builds, run with -Z macro-backtrace for more info)
